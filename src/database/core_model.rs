//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "core_model")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
    pub description: String,
    #[sea_orm(column_name = "typeId")]
    pub type_id: i32,
    pub picture: Option<String>,
    #[sea_orm(column_name = "isPublished")]
    pub is_published: bool,
    #[sea_orm(column_name = "enableDataSharing")]
    pub enable_data_sharing: bool,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(column_name = "createdBy")]
    pub created_by: Option<Uuid>,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(column_name = "updatedBy")]
    pub updated_by: Option<Uuid>,
    #[sea_orm(column_name = "deletedAt")]
    pub deleted_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_name = "deletedBy")]
    pub deleted_by: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::core_model_component::Entity")]
    CoreModelComponent,
    #[sea_orm(
        belongs_to = "super::core_model_type::Entity",
        from = "Column::TypeId",
        to = "super::core_model_type::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CoreModelType,
    #[sea_orm(has_many = "super::core_policy::Entity")]
    CorePolicy,
    #[sea_orm(has_many = "super::core_policy_violation::Entity")]
    CorePolicyViolation,
    #[sea_orm(has_many = "super::core_shared_model_data::Entity")]
    CoreSharedModelData,
    #[sea_orm(has_many = "super::core_twin::Entity")]
    CoreTwin,
    #[sea_orm(has_many = "super::core_user_subscription::Entity")]
    CoreUserSubscription,
}

impl Related<super::core_model_component::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoreModelComponent.def()
    }
}

impl Related<super::core_model_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoreModelType.def()
    }
}

impl Related<super::core_policy::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CorePolicy.def()
    }
}

impl Related<super::core_policy_violation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CorePolicyViolation.def()
    }
}

impl Related<super::core_shared_model_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoreSharedModelData.def()
    }
}

impl Related<super::core_twin::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoreTwin.def()
    }
}

impl Related<super::core_user_subscription::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoreUserSubscription.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
