//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "core_policy_violation")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_name = "userId")]
    pub user_id: Uuid,
    #[sea_orm(column_name = "modelId")]
    pub model_id: Uuid,
    #[sea_orm(column_name = "policyId")]
    pub policy_id: Uuid,
    #[sea_orm(column_name = "actionId")]
    pub action_id: Uuid,
    #[sea_orm(column_name = "twinId")]
    pub twin_id: Uuid,
    #[sea_orm(column_name = "violatedAt")]
    pub violated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::core_model::Entity",
        from = "Column::ModelId",
        to = "super::core_model::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CoreModel,
    #[sea_orm(
        belongs_to = "super::core_policy::Entity",
        from = "Column::PolicyId",
        to = "super::core_policy::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CorePolicy,
    #[sea_orm(
        belongs_to = "super::core_policy_action::Entity",
        from = "Column::ActionId",
        to = "super::core_policy_action::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CorePolicyAction,
    #[sea_orm(
        belongs_to = "super::core_twin::Entity",
        from = "Column::TwinId",
        to = "super::core_twin::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CoreTwin,
    #[sea_orm(
        belongs_to = "super::core_user::Entity",
        from = "Column::UserId",
        to = "super::core_user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CoreUser,
}

impl Related<super::core_model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoreModel.def()
    }
}

impl Related<super::core_policy::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CorePolicy.def()
    }
}

impl Related<super::core_policy_action::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CorePolicyAction.def()
    }
}

impl Related<super::core_twin::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoreTwin.def()
    }
}

impl Related<super::core_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoreUser.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
